/**********************************************************************************************************************
 *  AUTHOR IDENTITY
 *  -------------------------------------------------------------------------------------------------------------------
 *  Name                          Initials      Company
 *  -------------------------------------------------------------------------------------------------------------------
 *  David Zentner                 viszda        Vector Informatik GmbH
 *  -------------------------------------------------------------------------------------------------------------------
 *  REVISION HISTORY
 *  -------------------------------------------------------------------------------------------------------------------
 *  Version      Date        Author  Change Id      Description
 *  -------------------------------------------------------------------------------------------------------------------
 *   1.00.00     2016-11-23  viszda  -              Script created
 *   1.00.01     2017-01-31  viszda  ESCAN00093784  Error message in DaVinci Configurator 5 if project is not loaded
 *                           viszda  ESCAN00093791  Add missing version history
 *               2017-02-03  viszda  ESCAN00093800  Measurement points are created for Vfb hooks not belonging to runnables
 *********************************************************************************************************************/
 
import com.vector.cfg.automation.api.ScriptApi
import com.vector.cfg.automation.model.ecuc.microsar.rte.Rte
import com.vector.cfg.automation.model.ecuc.microsar.rte.rtegeneration.RteGeneration
import com.vector.cfg.automation.model.ecuc.microsar.rtm.Rtm
import com.vector.cfg.automation.model.ecuc.microsar.rtm.rtmmeasurementpoint.RtmMeasurementPoint
import com.vector.cfg.model.access.DefRef
import com.vector.cfg.model.mdf.MIObject
import com.vector.cfg.model.mdf.model.autosar.ecucdescription.MIModuleConfiguration

import java.nio.file.Path

import static com.vector.cfg.automation.api.ScriptApi.daVinci
import static com.vector.cfg.automation.api.ScriptApi.getActiveProject

daVinci {

    scriptTask("CreateRunnableMeasurementPoints", DV_PROJECT) {

        taskDescription """
This script helps to configure the run-time measurement of runnables with Rtm.
                        """
        taskHelp """
This script reads the runnables in the current project and inserts RtmMeasurementPoints for all runnables for which the RTE has configured VFB trace hooks. These hooks have to be added manually in the RTE configuration. The RTE comfort editor provides an 'Import VFB Trace Functions Assistant' for this task.

The script creates a source file Rte_Hook_Rtm.c with implementation of the VFB trace hooks to start and stop the RTM measurement points.

The source file Rte_Hook_Rtm.c is generated in the template files folder (see project settings). The file is overwritten with each execution of this script.

To generate the correct signature of the trace functions the script parses the file Rte_Hook.h in the module files folder (usually Appl\\GenData).
        """
        
        code {
            def rtmModules = activeEcuc.modules(Rtm.DefRef)
            if (rtmModules.isEmpty()) {
                userInteractions.warnToUser("Rtm module is not part of the configuration")
                return
            }

            createRunnableMeasurementPoints()
        }
        
    }
}

void createRunnableMeasurementPoints() {
    ScriptApi.activeProject {
        List<RtmMeasurementPoint> measurementPoints = createVfbHooksForRteRunnables()
        boolean res = generateRte()
        if (res) {
            WriteRte_Hook_Rtm(measurementPoints)
        }
    }
}

List<RtmMeasurementPoint> createVfbHooksForRteRunnables() {
    List<RtmMeasurementPoint> measurementPoints = new ArrayList<RtmMeasurementPoint>()
    Set<String> measurementPointNames = new HashSet<String>()
    String startPostfix = "_Start"
    String returnPostfix = "_Return"

    ScriptApi.activeProject {
        transaction {

            /* Enable VFB trace hooks */
            Rte rte = bswmdModel(Rte.DefRef).single
            RteGeneration rteGeneration = rte.getRteGeneration()
            scriptLogger.info("Enabling VfbTrace")
            rteGeneration.rteVfbTraceEnabled.setValue(true)

            rteGeneration.getRteVfbTraceFunction().each {
                if (it.value.startsWith("Rte_Runnable_") && it.value.endsWith(startPostfix)) {
                    measurementPointNames.add(it.value.substring(0, it.value.size() - startPostfix.size()))
                }
                if (it.value.startsWith("Rte_Runnable_") && it.value.endsWith(returnPostfix)) {
                    measurementPointNames.add(it.value.substring(0, it.value.size() - returnPostfix.size()))
                }
            }

            measurementPointNames.each {
                boolean foundTraceReturn = false
                boolean foundTraceStart = false
                String mpName = it

                rteGeneration.getRteVfbTraceFunction().each {
                    if (it.value.equals(mpName + startPostfix)) {
                        foundTraceStart = true
                    }
                    if (it.value.equals(mpName + returnPostfix)) {
                        foundTraceReturn = true
                    }
                }

                if ((!foundTraceStart)) {
                    scriptLogger.info("Skipping <" + mpName + "> because start hook is not configured in RTE")
                } else if (!foundTraceReturn) {
                    scriptLogger.info("Skipping <" + mpName + "> because return hook is not configured in RTE")
                } else {
                    // Create measurement point in RTM for runnable (if not existing).
                    Rtm rtm = bswmdModel(Rtm.DefRef).single
                    RtmMeasurementPoint rtmMeasurementPoint = null

                    rtm.rtmMeasurementPoint.each {
                        if (it.shortname.equals(mpName)) {
                            rtmMeasurementPoint = it
                        }
                    }

                    if (rtmMeasurementPoint != null) {
                        scriptLogger.info("Skipping creation of measurement point <" + mpName + "> because it already exists")
                    } else {
                        rtmMeasurementPoint = rtm.rtmMeasurementPoint.createAndAdd(mpName)
                        scriptLogger.info("New measurement point <" + rtmMeasurementPoint.shortname + "> created")
                        rtmMeasurementPoint.getRtmMeasurementGroupOrCreate().setValue("Runnable")
                    }

                    measurementPoints.add(rtmMeasurementPoint)
                }
            }
        }
    }

    return measurementPoints
}

boolean WriteRte_Hook_Rtm(List<RtmMeasurementPoint> measurementPoints) {
    ScriptApi.activeProject {
        Path genDataFolder = paths.genDataFolder
        Path srcDataFolder = paths.templateFolder

        def rteHookH = new File(genDataFolder.toString(), "Rte_Hook.h")
        def hookRtmFile = new File(srcDataFolder.toString(), "Rte_Hook_Rtm.c")

        // Delete content of Rte_Hook_Rtm.c, this file is rewritten every time
        // Manual changes will be overwritten
        hookRtmFile.write("")

        hookRtmFile.append("#include \"Rtm.h\"\n")
        hookRtmFile.append("#include \"Rte_Hook.h\"\n\n")

        List<String> functionHeader = []
        // Parse function header from Rte_Hook.h
        rteHookH.eachLine {
            def m = it =~ /FUNC/
            if (m) {
                functionHeader.add(it.split(/;/)[0])
            }
        }

        scriptLogger.info "Writing Rte_Hook_Rtm.c"

        functionHeader.each {
            String fh = it
            measurementPoints.each {

                String mpname = it.shortname
                String mpname_start = mpname + "_Start\\("
                String mpname_return = mpname + "_Return\\("

                if (fh.find(mpname_start)) {
                    hookRtmFile.append('\n' + fh + '\n' + '{' + '\n' +
                            '\t' + "Rtm_Start(RtmConf_RtmMeasurementPoint_" + mpname + ");" +
                            '\n' + '}' + '\n'
                    )
                }

                if (fh.find(mpname_return)) {
                    hookRtmFile.append('\n' + fh + '\n' + '{' + '\n' +
                            '\t' + "Rtm_Stop(RtmConf_RtmMeasurementPoint_" + mpname + ");" +
                            '\n' + '}' + '\n'
                    )
                }
            }
        }

    }
}

boolean generateRte() {
    def isSuccessful = true
    ScriptApi.activeProject {
        generation {
            scriptLogger.info "Starting RTE generation"
            settings {
                selectGeneratorsByDefRef("Rte")
                selectGenerationTargetReal()
            }
            def result = generate().getResult()
            if (result != null) {
                if (!result.isSuccessful())
                {
                    scriptLogger.error("RTE generation was not successful, aborting script")
                    isSuccessful = false
                } else {
                    scriptLogger.info "RTE generation finished"
                }
            } else {
                isSuccessful = false;
                scriptLogger.warn("RTE generation aborted")
            }
        }
    }
    return isSuccessful
}